Non-canonical Mode Input Processing

In non-canonical mode input processing input data is not assembled into lines and ERASE and KILL processing do not occur. The values of the MIN and TIME members of the c_cc array of the termios structure are used to determine how to process the bytes received.

MIN represents the minimum number of bytes that should be received when the read() function returns successfully. TIME is a timer of 0.1 second granularity (or as close to that value as can be accommodated) that is used to time out bursty and short-term data transmissions. If MIN is greater than MAX_INPUT the response to the request is undefined. The four possible values for MIN and TIME and their interactions are as follows:

Case A: MIN>0 TIME>0  
In this case TIME serves as an inter-byte timer and is activated after the first byte is received. As soon as the first byte is received the inter-byte timer is started. As long as bytes keep coming before the timer expires and the total number of bytes does not exceed the amount requested by the read call the read blocks. Since TIME is an inter-byte timer it is reset upon receipt of each byte. If the timer expires or the number of bytes requested is read the read returns. It is possible to block indefinitely here since the timer is not started until the first byte is received.

Case B: MIN>0 TIME=0  
In this case there is no timer. A pending read is not satisfied until MIN bytes are received or a signal occurs. If some data has been read before the signal it is returned. If not -1 is returned with errno set to EINTR.

Case C: MIN=0 TIME>0  
In this case TIME is a total read timeout. The read returns if either MIN bytes are received before the timer expires or if the timer expires. In the latter case the number of bytes received is returned even if that number is zero. If an interrupt occurs before the timer expires and no bytes are read the read returns -1 with errno set to EINTR.

Case D: MIN=0 TIME=0  
This implements a poll read. The minimum of the number of bytes requested and the number of bytes currently available is returned, without waiting for more bytes to be input. If no characters are available zero is returned. This is not exactly equivalent to the non-blocking case. In the latter the read waits for a brief time for data to be input if none is currently available and sets errno to EAGAIN and returns -1 if no data is available.

poll.h is for waiting for something to happen on a specific file descriptor
